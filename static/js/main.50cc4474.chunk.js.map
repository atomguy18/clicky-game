{"version":3,"sources":["components/navbar/navbar2.js","components/container/container.js","components/Imagecard/Imagecard.js","components/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","score","highScore","className","href","Container","props","children","Imagecard","image","onClick","alt","src","Header","App","state","images","clicked","handleClick","id","clickedArray","indexOf","push","setState","shuffle","array","sort","Math","random","this","Pictures","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yvBA6BeA,MA3Bf,YAAsC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,UACvB,OACE,6BACE,yBAAKC,UAAU,iDACb,uBAAGA,UAAU,eAAeC,KAAK,IAC/B,4CAEF,4BAAI,4DACJ,6BACE,wBAAID,UAAU,QACZ,4BACE,wBAAIA,UAAU,aAAd,UACS,8BAAOF,KAGlB,4BACE,wBAAIE,UAAU,aAAd,eACc,8BAAOD,U,MCVpBG,MANf,SAAmBC,GACjB,OACE,yBAAKH,UAAU,qCAAqCG,EAAMC,W,YCM/CC,MARf,YAAwC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAC1B,OACI,yBAAKP,UAAU,QACb,yBAAKQ,IAAKF,EAAOG,IAAKH,EAAOC,QAASA,M,MCW/BG,MAdf,WACE,OACE,yBAAKV,UAAU,yBACb,yBAAKA,UAAU,UACb,2CACA,gI,OCiDOW,E,2MAhDbC,MAAQ,CACNd,MAAO,EACPC,UAAW,EACXc,OAAQ,GACRC,QAAS,I,EAGXC,YAAc,SAAAC,GACZ,IAAMC,EAAe,EAAKL,MAAME,SACE,IAA9BG,EAAaC,QAAQF,IACvBC,EAAaE,KAAKH,GAClB,EAAKI,SAAS,CAAEtB,MAAO,EAAKc,MAAMd,MAAQ,EAAGgB,QAASG,IAClD,EAAKL,MAAMd,MAAQ,EAAI,EAAKc,MAAMb,WACpC,EAAKqB,SAAS,CAAErB,UAAW,EAAKa,MAAMd,MAAQ,IAEhD,EAAKuB,QAAQ,EAAKT,MAAMC,SAExB,EAAKO,SAAS,CAAEtB,MAAO,EAAGmB,aAAc,GAAIH,QAAS,M,uEAIjDQ,GACN,OAAOA,EAAMC,MAAK,kBAAMC,KAAKC,SAAW,Q,0CAGxCC,KAAKN,SAAS,CAAEP,OAAQa,KAAKL,QAAQM,O,+BAE7B,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,CAAQ7B,MAAO4B,KAAKd,MAAMd,MAAOC,UAAW2B,KAAKd,MAAMb,YACvD,kBAAC,EAAD,MACA,kBAAC,EAAD,KACG2B,KAAKd,MAAMC,OAAOe,KAAI,SAAAtB,GACrB,OACE,kBAAC,EAAD,CACEU,GAAIV,EAAMU,GACVV,MAAOA,EAAMG,IACboB,IAAKvB,EAAMG,IACXF,QAAS,kBAAM,EAAKQ,YAAYT,EAAMU,gB,GAxCpCc,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.50cc4474.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Navbar({ score, highScore}) {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"\">\r\n          <h1>Clicky Game</h1>\r\n        </a>\r\n        <h2><span>Click an Image to Begin! </span></h2>\r\n        <div>\r\n          <ul className=\"menu\">\r\n            <li>\r\n              <h5 className=\"menu-text\">\r\n                Score: <span>{score}</span>\r\n              </h5>\r\n            </li>\r\n            <li>\r\n              <h5 className=\"menu-text\">\r\n                High Score: <span>{highScore}</span>\r\n              </h5>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Container(props) {\r\n  return (\r\n    <div className=\"wrapper d-flex flex-row flex-wrap\">{props.children}</div>\r\n  );\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./imagecard.css\";\r\n\r\nfunction Imagecard({ image, onClick }) {\r\n  return (\r\n      <div className=\"card\">\r\n        <img alt={image} src={image} onClick={onClick} />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Imagecard;\r\n","import React from \"react\";\r\nimport \"./Main.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"jumbotron text-center\">\r\n      <div className=\"Header\">\r\n        <h1>Clicky-Game</h1>\r\n        <h2>\r\n          Click on a picture to earn points, but dont click the same picture\r\n          more than once or you lose\r\n          </h2>\r\n          </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\nimport Navbar from \"./components/navbar/navbar2\";\nimport Container from \"./components/container/container\";\nimport \"./App.css\";\nimport Imagecard from \"./components/Imagecard/Imagecard\";\nimport Header from \"./components/main/Main\";\nimport Pictures from \"./components/pictures\";\n\nclass App extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n    images: [],\n    clicked: []\n  };\n\n  handleClick = id => {\n    const clickedArray = this.state.clicked;\n    if (clickedArray.indexOf(id) === -1) {\n      clickedArray.push(id);\n      this.setState({ score: this.state.score + 1, clicked: clickedArray });\n      if (this.state.score + 1 > this.state.highScore) {\n        this.setState({ highScore: this.state.score + 1 });\n      }\n      this.shuffle(this.state.images);\n    } else {\n      this.setState({ score: 0, clickedArray: [], clicked: [] });\n    }\n  };\n\n  shuffle(array) {\n    return array.sort(() => Math.random() - 0.5);\n  }\n  componentDidMount() {\n    this.setState({ images: this.shuffle(Pictures) });\n  }\n  render() {\n    return (\n      <>\n        <Navbar score={this.state.score} highScore={this.state.highScore} />\n        <Header />\n        <Container>\n          {this.state.images.map(image => {\n            return (\n              <Imagecard\n                id={image.id}\n                image={image.src}\n                key={image.src}\n                onClick={() => this.handleClick(image.id)}\n              />\n            );\n          })}\n        </Container>\n      </>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}